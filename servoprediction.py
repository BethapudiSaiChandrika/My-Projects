# -*- coding: utf-8 -*-
"""ServoPrediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1s7p0HSQnmyTpPWRqqGg2znrqz_i3a5XK

#**Servo Prediction using Linear Regression**

#import library
"""



import pandas as pd

"""#import data"""

Sv=pd.read_csv('https://github.com/YBIFoundation/Dataset/raw/main/Servo%20Mechanism.csv')

"""#Get the first five rows of dataframe"""

Sv.head()

"""#Get information of dataFrame"""

Sv.info()

"""#Get the Summary"""

Sv.describe()

"""#Get Column Names"""

Sv.columns

"""#Get count of categorical values"""

Sv.value_counts()

Sv[['Motor']].value_counts()

Sv[['Screw']].value_counts()

"""#Get Encoding of Categorical Features"""

Sv.replace({'Motor':{'A':0,'B':1,'C':2,'D':3,'E':4}},inplace=True)

Sv.replace({'Screw':{'A':0,'B':1,'C':2,'D':3,'E':4}},inplace=True)

"""#Define y (Dependent or Target Value) and X (Independent Variable)"""

y=Sv['Class']

y.shape

y

X=Sv[['Motor', 'Screw', 'Pgain', 'Vgain']]

X.shape

X

"""#Train Test Split"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,y, train_size=0.7, random_state=2529)

X_train.shape, X_test.shape, y_train.shape, y_test.shape

"""#select model"""

from sklearn.linear_model import LinearRegression
mech = LinearRegression()

"""#Train or Fit Model"""

mech.fit(X_train,y_train)

mech.intercept_

mech.coef_

"""# predict model"""

y_pred=mech.predict(X_test)

y_pred

"""#model accuracy"""

from sklearn.metrics import mean_absolute_error, mean_absolute_percentage_error, mean_squared_error,r2_score

mean_absolute_error(y_test,y_pred)

mean_absolute_percentage_error(y_test,y_pred)

mean_squared_error(y_test,y_pred)

r2_score(y_test,y_pred)

"""#Get Visualization Actual Vs Predicted Values"""

import matplotlib.pyplot as mpt
mpt.scatter(y_test,y_pred)
mpt.xlabel('Actual')
mpt.ylabel('Predicted')
mpt.title('Actual vs Predicted')
mpt.show()

"""# Get Future Predictions
**Lets select a random sample**


1.   Extract a random row using sample function
2.   Seperate X and y
3.   Standardize X
4.   Predict
"""

X_new=Sv.sample(1)

X_new

X_new.shape

X_new=X_new.drop('Class',axis=1)

X_new

X_new.shape

y_pred_new=mech.predict(X_new)

y_pred_new